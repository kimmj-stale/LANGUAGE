/**
 * 비트 연산자
 * 2진수 / 16진수로 이루어진 비트로 연산이 가능한 연산자
*/

/*
ex)
#include <stdio.h>
int main(void) {
    int a = 0x1;
//2진수로 0000 0000 0000 0000 0000 0000 0000 0001 ,16진수로 0000 0001
    int b = 0x3;    
//2진수로 0000 0000 0000 0000 0000 0000 0000 0011 ,16진수로 0000 0003 
    printf("%d\n" , a&b);   //1
    printf("%d\n" , a|b);   //3
    printf("%d\n" , a^b);   //2
    printf("%d\n" , a^b^b); //1
/**
 * 비트 연산
 * a^b는 ~0011(= 3) - ~0001(= 1) = ~0010(= 2) 식으로 계산된다.
*/
/*
    printf("%d\n" , ~a);    //fffffffe
    printf("%d\n" , ~b);    //fffffffc
    /**
     * ~는 Not의 의미를 갖고 있다
     * a = 0000 0000 0000 0000 0000 0000 0000 0001
     * ~a = 1111 1111 1111 1111 1111 1111 1111 1110
    */
/*
    return 0;
}
*/

/**
 * 시프트 연산자
 * 연산을 좀 더 쉽게 사용할 수 있도록 하는 연산자
*/

/*
ex)
#include <stdio.h>
int main(void) {
    printf("%d\n" , 90 * 2);    //180
    printf("%d\n" , 90 << 1);   //180
    printf("%d\n" , 90 << 2);   //360
/**
 * 곱셈 연산을 더 쉽게 할 수 있도록 간편하게 시프트 연산자를 사용한다.
*/
/*
    printf("%d\n" , 90 < 2);    //0
//연산자로 사용된 것이 아닌 합불 자료형에 의해 0(false)이 나온 것
    printf("%d\n" , 90 / 2);    //45
    printf("%d\n" , 90 >> 1);   //45
    printf("%d\n" , 90 >> 2);   //22
    printf("%d\n" , 90 >> 3);   //11
    /**
     * 나누기 연산을 더 쉽게 할 수 있도록 시프트 연산자를 사용 , int자료형으로 출력되어 소숫점은 버린다.
    */
/*
    return 0;
}
*/
/**
 * &연산자
 * &연산자는 변수의 메모리 주소의 첫 번지를 나타낸다. 
 * 예를 들어, int자료형 문자는 4바이트를 차지하므로 저장 공간은 4개의 주소를 가진다. 
 * 그 중 첫 번째 주소를 얻을 수 있다. 이때 받는 자료형의 형태는 %p로 받는다.
 * 지역 변수 값은 메모리의 스택에 저장된다. 이는 실행할 때 마다 달라진다.
*/